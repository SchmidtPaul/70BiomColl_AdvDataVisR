{
  "hash": "e457ddf85007a133eea88a0f85661455",
  "result": {
    "markdown": "---\ntitle: \"Tutorial: Advanced data visualization in R\"\nsubtitle: \"70th Biometrical Colloquium 2024 in Luebeck\"\nexecute: \n  message: false\n  warning: false\n  echo: true\nformat: \n  html: \n    fig-height: 4\n    fig-dpi: 300\n    fig-width: 6\n    fig-align: center\n  pdf: default\nknitr:\n  opts_chunk:\n    out.width: 100%\n    fig.showtext: TRUE\n    collapse: true\n    comment: \"#>\"\n---\n\n::: {.cell}\n\n:::\n\n\nThis is the supporting material for the tutorial **Advanced data visualization in R** which is part of the 70th Biometrical Colloquium 2024 in Luebeck and takes place 28.02.2024 09:00-12:00. Here is the tutorial description as displayed on the [website's conference program](https://www.biometrische-gesellschaft.de/en/events/biometric-colloquia/70th-biometrical-colloquium-2024-in-luebeck/conference-program.html):\n\nIn case you are looking at the PDF version of this material, you may want to switch to the HTML version for a better experience. You can do so by following this URL: https://schmidtpaul.github.io/70BiomColl_AdvDataVisR/\n\n> **Advanced data visualization in R: (Re)producing professional plots with ggplot2 and the tidyverse**\n>\n> Lecturer: Paul Schmidt (BioMath GmbH, Hamburg)\n>\n> Learning objectives:\n>\n> -   Deep dive into ggplot2: Understand the intricacies of ggplot2 for top-tier data visualization\n> -   Data manipulation with tidyverse: Utilize packages like dplyr, tidyr, and forcats to shape data optimally for creating graphs\n> -   Aesthetic fine-tuning: Master the skills of axis formatting, theme detailing, and color selection\n> -   Reproducing Exercise: Recreate published plots to understand the application of ggplot2 techniques in real-world scenarios\n> -   Exporting excellence: Learn best practices for exporting plots in publication-ready formats\n>\n> Target group:\n>\n> -   Anyone wanting to produce or present high-quality plots. Conveying complex data insights through refined visualizations is a relevant part of statistical analysis\n>\n> Prerequisites:\n>\n> -   Basic understanding of R programming is required\n> -   Basic knowledge of ggplot2 and the tidyverse is beneficial, but not required\n> -   R-packages: tidyverse, cowplot, ggrepel, ggtext, viridis\n>\n> Format: Hybrid\n\n# Part 0: Setup\n\nNotice that we expect participants with different levels of experience in this tutorial. Furthermore, the tutorial duration is only 3 hours and thus quite short. As a consequence, this material often links to other resources with more detailed information instead of blowing up the content of this material. However, where possible, these links don't simply lead to official online documentation etc. which may be hard to grasp for beginners, but instead to other workshop content created by this tutorial's main lecturer.\n\nThe decision on which plots to create in this workshop was inspired by [this blog post](https://albert-rapp.de/posts/ggplot2-tips/15_alternative_paired_bars/15_alternative_paired_bars.html) by [Albert Rapp](https://albert-rapp.de/) whose R and data visualization content is worth checking out!\n\nYou will need to install and load the following packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"camcorder\")\n# install.packages(\"cowplot\")\ninstall.packages(\"gapminder\")\ninstall.packages(\"ggh4x\")\n# install.packages(\"ggrepel\")\ninstall.packages(\"ggtext\")\ninstall.packages(\"scales\")\ninstall.packages(\"showtext\")\ninstall.packages(\"tidyverse\")\n# install.packages(\"viridis\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(camcorder)\n# library(cowplot)\nlibrary(gapminder)\nlibrary(ggh4x)\n# library(ggrepel)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(showtext)\nlibrary(tidyverse)\n# library(viridis)\n\nshowtext::showtext_opts(dpi = 300)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n# Part 1: Export\n\nThis might be a bit unexpected, but I would argue that the very first thing we should talk about is exporting your ggplots. A major reason for this is the fact that by default you would create your ggplots by looking at them in the \"Plots\" preview window in RStudio. While this is not a problem *per se*, it becomes problematic once you realize the scale/size of your ggplot automatically adjusts to the size of your preview window. This is especially annoying regarding font sizes. Try it out: Create the following ggplot and then play around with width and height of your \"Plots\" panel in RStudio:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyplot <- ggplot(data = mtcars) +\n  aes(y = mpg, x = hp) +\n  geom_point()\n```\n:::\n\n\nYou may get results like this:\n\n::: columns\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmyplot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=100%}\n:::\n:::\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmyplot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=100%}\n:::\n:::\n\n:::\n:::\n\nAs far as I know, there are two ways of properly dealing with this.\n\n## Export and open file\n\nTo avoid the issue, you may simply never look at the preview of your ggplot in RStudio and instead always export your plot to then look at the exported file. Exporting a ggplot is flexible and convenient. You can choose a device function (e.g. [png](https://www.rdocumentation.org/packages/grDevices/versions/3.4.1/topics/png)) or \"eps\", \"ps\", \"tex\" (pictex), \"pdf\", \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" or \"wmf\" (windows only). Furthermore, you can set width and height in a unit of your choice and depending on your file type even choose the dpi and more.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\n  filename = \"myfile.png\",\n  plot = myplot,\n  width = 6, \n  height = 4,\n  units = \"in\",\n  dpi = 300\n) \n```\n:::\n\n\nYou don't even need to manually open the file after creating it if you instead run this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem('open \"myfile.png\"')\n```\n:::\n\n\n## Use {camcorder}\n\nThere is a package called [`{camcorder}`](https://thebioengineer.github.io/camcorder/) which advertises its \"eventual goal of creating a GIF showing all the plots saved sequentially during the design process\" like in [these examples](https://thebioengineer.github.io/camcorder/#goal-end-product). However, I am [not the only one](https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages.html#camcorder) using camcorder for its feature of fixing the canvas size. In other words: It shows your ggplot in the RStudio panel fixed to your chosen scale. Thus, simply run something like this at the beginning of your session so that all ggplots shown afterwards are exactly 6x4 inches wide with dpi 300:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  camcorder::gg_record(\n    device = \"png\",\n    width = 6, \n    height = 4,\n    units = \"in\", \n    dpi = 300\n  )\n```\n:::\n\n\nNote that it actually does not show up in RStudio's \"Plots\" but in its \"Viewer\" panel. Furthermore, note that it actually saves the intermediate plots somewhere, but defaults to a temporary directory for that.\n\n# Part 2: A single plot\n\nLet us first create a single plot to compare the life expectancy between 1952 and 2007 for seven countries, respectively.\n\n## data prep\n\nThe data is courtesy of [the Gapminder foundation](https://www.gapminder.org/) and can easily be accessed via the [{gapminder}](https://jennybc.github.io/gapminder/) package. We can then make use of [the pipe operator `%>%`](https://schmidtpaul.github.io/dsfair_quarto/ch/rbasics/tidyverse.html#the-pipe-operator) to create a subset of the data via the [`filter()` function](https://schmidtpaul.github.io/dsfair_quarto/ch/rbasics/tidyverse.html#filter). Then, in order for our ggplot to work as intended in the next step, we also need to format the year column as a factor instead of an integer value via [`mutate()`](https://schmidtpaul.github.io/dsfair_quarto/ch/rbasics/tidyverse.html#mutate). Both functions are from the [{dplyr}](https://dplyr.tidyverse.org/) package which we loaded as part of the [{tidyverse}](https://www.tidyverse.org/). Finally, we use `droplevels()` to get rid of the factor levels that are now no longer present in the data (i.e. the countries we did not filter for).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- gapminder::gapminder %>% \n  filter(year == 1952 | year == 2007) %>% \n  filter(country %in% c(\"Canada\", \"Germany\", \"Japan\", \"Netherlands\", \"Nigeria\", \"Vietnam\", \"Zimbabwe\")) %>% \n  mutate(year = as.factor(year)) %>% \n  droplevels()\n\ndat\n#> # A tibble: 14 Ã— 6\n#>    country     continent year  lifeExp       pop gdpPercap\n#>    <fct>       <fct>     <fct>   <dbl>     <int>     <dbl>\n#>  1 Canada      Americas  1952     68.8  14785584    11367.\n#>  2 Canada      Americas  2007     80.7  33390141    36319.\n#>  3 Germany     Europe    1952     67.5  69145952     7144.\n#>  4 Germany     Europe    2007     79.4  82400996    32170.\n#>  5 Japan       Asia      1952     63.0  86459025     3217.\n#>  6 Japan       Asia      2007     82.6 127467972    31656.\n#>  7 Netherlands Europe    1952     72.1  10381988     8942.\n#>  8 Netherlands Europe    2007     79.8  16570613    36798.\n#>  9 Nigeria     Africa    1952     36.3  33119096     1077.\n#> 10 Nigeria     Africa    2007     46.9 135031164     2014.\n#> 11 Vietnam     Asia      1952     40.4  26246839      605.\n#> 12 Vietnam     Asia      2007     74.2  85262356     2442.\n#> 13 Zimbabwe    Africa    1952     48.5   3080907      407.\n#> 14 Zimbabwe    Africa    2007     43.5  12311143      470.\n```\n:::\n\n\n## base plot\n\nOne typical way you may find data like this visualized is via a grouped bar plot. The minimum amount of code to create such a plot via ggplot is this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = year) +\n  geom_col(position = position_dodge())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=100%}\n:::\n:::\n\n\n[Read this](https://schmidtpaul.github.io/dsfair_quarto/ch/summaryarticles/ggplot2intro.html#lets-start) if you are not familiar with the general ggplot syntax. We need to add `position = position_dodge()` to `geom_col()`, since the default is to stack the multiple bars (for the different years) on top of each other (as seen in the *Nature* example plot below).\n\n### (factor) level reordering\n\nIt may seem irritating that countries are sorted alphabetically starting at the bottom. Moreover, 1952 is below 2007 in the plot (but not in the legend!). This is because these two columns are formatted as factors in our data and by default factor levels are sorted alphabetically.\n\nNote that ggplot applies this factor level order, but does it so from bottom to top.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(dat$country)\n#> [1] \"Canada\"      \"Germany\"     \"Japan\"       \"Netherlands\" \"Nigeria\"    \n#> [6] \"Vietnam\"     \"Zimbabwe\"\n```\n:::\n\n\nA useful package for dealing with factors in R is [{forcats}](https://forcats.tidyverse.org/) whose functions all start with `fct_*`. One way of dealing with this is changing the factor level order in the data before passing it to ggplot. Here, we may simply reverse the order via `fct_rev()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- dat %>% \n  mutate(across(c(country), ~ fct_rev(.x)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(dat$country)\n#> [1] \"Zimbabwe\"    \"Vietnam\"     \"Nigeria\"     \"Netherlands\" \"Japan\"      \n#> [6] \"Germany\"     \"Canada\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = year) +\n  geom_col(position = position_dodge())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=100%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Alternative 1\"}\n# alternatively, you may apply fct_rev() inside aes() instead of altering the data beforehand \nggplot(data = dat) +\n  aes(x = lifeExp, y = fct_rev(country), fill = year) +\n  geom_col(position = position_dodge())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Alternative 2\"}\n# alternatively, you may manually provide the levels in the desired order within scale_y_discrete()\nggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = year) +\n  geom_col(position = position_dodge()) +\n  scale_y_discrete(limits = c(\"Zimbabwe\", \"Vietnam\", \"Nigeria\", \"Netherlands\", \"Japan\", \"Germany\", \"Canada\"))\n```\n:::\n\n\nHowever, it probably makes more sense to sort the countries according to the data. Here, we could sort them according to their life expectancy in 2007.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsorted_countries <- dat %>% \n  filter(year == \"2007\") %>% \n  arrange(lifeExp) %>% \n  pull(country) %>% \n  as.character()\n\ndat <- dat %>% \n  mutate(country = fct_relevel(country, sorted_countries))\n\nggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = year) +\n  geom_col(position = position_dodge())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=100%}\n:::\n:::\n\n\nNext, we address the order of years in the plot and the legend. As you can see in the previous plots, once more the first factor level (1952) is on the bottom, while the second level (2007) is on top. Thus, we could use one of the approaches shown for `country` to change that. More precisely, let's take the approach of *Alternative 1* and use `fct_rev()` inside the `aes()`.\n\nNote however, that while this changes the order of the years in the plot, it does not affect their order in the legend. To address that, we can use the `limits =` argument in `scale_fill_manual()` (which corresponds to *Alternative 2* above):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = fct_rev(year)) +\n  geom_col(position = position_dodge()) +\n  scale_fill_discrete(limits = c(\"1952\", \"2007\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=100%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Alternative\"}\n# alternatively, you may reverse the legend order via guides()\nggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = fct_rev(year)) +\n  geom_col(position = position_dodge()) +\n  guides(fill = guide_legend(reverse = TRUE))\n```\n:::\n\n\n## reproducing a theme\n\nNow that we've got the basics correct, the next thing I would want to change is things like the theme, i.e. the non-data components of the plot: titles, labels, fonts, background, gridlines, and legends.\n\nUsing `theme()` allows us to format our plot in any way we want. Instead of picking things based on what feels good, let us here try to recreate the layout of a plot published in [*Nature*](https://doi.org/10.1038/d41586-019-03305-w) in '150 years of Nature: a data graphic charts our evolution' by Richard Monastersky & Richard Van Noorden (2019). [URL to the plot](https://media.nature.com/lw767/magazine-assets/d41586-019-03305-w/d41586-019-03305-w_17345518.png).\n\n![](https://media.nature.com/lw767/magazine-assets/d41586-019-03305-w/d41586-019-03305-w_17345518.png)\n\nThus, a better starting point would be to use the [complete theme](https://ggplot2.tidyverse.org/reference/ggtheme.html) `theme_minimal()` instead of the default `theme_gray()`. From here, we can further adjust things via `theme()`.\n\nFurthermore, let's also pick two of the colors used in that image (e.g. via any [online color picker](https://google.gprivate.com/search.php?search?q=pick+color+from+image+online)) for our years. We can create a named vector `year_colors` and when changing `scale_fill_discrete()` to `scale_fill_manual()` supply it via the `values =` argument.\n\nFinally, as our ggplot-code is getting longer, let's start saving out current plot into an object `p` and reuse it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear_colors <- c(\"1952\" = \"#F7AA59\", \"2007\" = \"#37A9E1\")\n\np <- ggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = fct_rev(year)) +\n  geom_col(position = position_dodge()) +\n  scale_fill_manual(\n    name = \"Year\",\n    limits = names(year_colors), \n    values = year_colors) +\n  theme_minimal(base_size = 12)\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=100%}\n:::\n:::\n\n\n### font\n\nTo further replicate the aesthetics of the Nature plot, we introduce a custom font named *Kanit*. This font, available through [Google Fonts](https://fonts.google.com/), has been chosen for its stylistic resemblance to the one used in the Nature publication.\n\nThe process begins by fetching the font from Google Fonts and making it available for use in our R session via `sysfonts::font_add_google(\"Kanit\", \"kanit\")`. Next, `showtext::showtext_auto()` activates the use of custom fonts in plots. It's important to also run `showtext::showtext_opts(dpi = 300)` to avoid getting unexpected results. This is because `{showtext}` uses a default of 72 dpi, while e.g. exporting plots via `ggsave()` defaults to `dpi = 300`. Furthermore, you may also want the dpi to be 300 (or some other number) when rendering plots within your RMarkdown via `knitr::opts_chunk$set(dpi = 300)` or quarto document via `fig-dpi: 300`.\n\nWe add a title and subtitle via `labs()` and then apply the font to all text elements via `text = element_text(family = \"kanit\")`. For some reason, the default position of title and subtitle in a ggplot is left-aligned with the y-axis - to instead left-align it with the left side of the entire plot, we apply `plot.title.position = \"plot\"`. Making the title a bit bigger and bold is straightforward. However, having a subtitle (or other text elements) that has automatic line breaks when the string is too long actually requires `{ggtext}` and more specifically a `ggtext::element_textbox_simple()` instead of the default `ggplot2::element_text()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsysfonts::font_add_google(\"Kanit\", \"kanit\")\nshowtext::showtext_auto()\n# We already did this above, but dont forget about it:\n# showtext::showtext_opts(dpi = 300)\n\nlong_subtitle <- \"In the mid-twentieth century, global life expectancy was shaped by post-war recovery, with variations across countries. As decades progressed, public health advances and socioeconomic growth painted a new picture of longevity. The data now reflect a world where life expectancy in 2007 often mirrors an improved quality of life compared to 1952.\"\n\np <- p +\n  labs(\n    title = \"LIFE EXPECTANCY\",\n    subtitle = long_subtitle\n  ) +\n  theme(text = element_text(family = \"kanit\")) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(size = 15, face = \"bold\"),\n    plot.subtitle = ggtext::element_textbox_simple(size = 10, margin = margin(0, 0, 5, 0))\n  )\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=100%}\n:::\n:::\n\n\n### axes\n\nFor our specific goal, we start by removing the axis titles as well as unnecessary space beyond the limits of each axis. Furthermore, there should be no axis line for the y-axis and a relatively thick black line with grey ticks for the x-axis. More details on axis formatting can be found [here](https://schmidtpaul.github.io/dsfair_quarto/ch/summaryarticles/ggplot2intro.html#axes).\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  scale_y_discrete(\n    name = NULL, # remove title\n    expand = c(0,0) # no extra space above or below\n  ) + \n  scale_x_continuous(\n    name = NULL, # remove title\n    expand = expansion(mult = c(0, 0.05)) # only 5% extra space above upper limit\n  ) +\n  theme(\n    axis.line.y = element_blank(), # remove line on y-axis\n    axis.text.x = element_text(color = \"#AAAAAA\"), # x-axis label color\n    axis.ticks.x = element_line(color = \"#AAAAAA\", linewidth = 0.4), # x-axis tick color & width\n    axis.ticks.length.x = unit(4, \"pt\"), # x-axis tick length\n    axis.line.x = element_line(color = \"black\", linewidth = 0.6) # x-axis line color & width\n  )\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=100%}\n:::\n:::\n\n\n### legend\n\nOur legend is supposed to be above the plot and left-aligned. We partly achieve this via `legend.position`, `legend.box.just` and `legend.justification`, but unfortunately this does not fully achieve the goal. We want to have a legend that is left-aligned with respect to the entire plot, not to the y-axis. As far as I know and unlike `plot.title.position = \"plot\"` which we used above, there is no way of achieving this normally. Thus, we here use a hack by setting the left `margin()` of the legend to a negative value that looks good enough.\n\nBesides the position, the legend title is made bold via `legend.title = element_text(face = \"bold\")` and we force all elements of the legend to be in one row via `guide_legend(title.position = \"left\", nrow = 1)`. Finally, the size of the colored squares in the legend is reduced via `legend.key.size = unit(0.4, \"cm\")`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  guides(\n    fill = guide_legend(\n      title.position = \"left\",\n      nrow = 1)\n  ) +\n  theme(\n    legend.position = \"top\",\n    legend.box.just = \"left\",\n    legend.justification = \"left\",\n    legend.margin = margin(0, 0, 0, -57, unit = \"pt\"),\n    legend.title = element_text(face = \"bold\"),\n    legend.key.size = unit(0.4, \"cm\")\n  )\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=100%}\n:::\n:::\n\n\n### grid lines\n\nLastly, we could adjust the grid lines. By default, ggplot has major and minor grid lines for both axes. Yet, we only want thin, dotted, grey lines for the major grid of the x-axis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(linetype = \"dotted\", color = \"#AAAAAA\", linewidth = 0.3)\n  )\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=100%}\n:::\n:::\n\n\n## improve the plot\n\nWe have now mostly reproduced the layout of the *Nature* plot and applied it to our plot. At this point, we could try out things that may improve the plot.\n\n### labels\n\nIn certain cases it can be beneficial to additionally label data points. In this plot, we may simply label each bar with rounded life expectancy it represents. We here do so via `geom_text()` where `aes(label = round(lifeExp))`. Note that we also need to add `group = fct_rev(year)` here. This is because so far we applied `fill = fct_rev(year)` in the general `aes()` which led to different groups due to the different fill colors so that `geom_col(position = position_dodge())` knew which groups/bars were supposed to be dodged. However, our labels created via `geom_text()` do not have a fill attribute but should still be dodged per year in the same way. Hence, `group = fct_rev(year)` is required and moreover, `position_dodge(width = 0.9)` actually needs a width value here set to the default dodge width for bars.\n\nOnce this is out the way, we make the text white and right-align it with extra space via a value for `hjust` that is larger than 1. Finally, don't forget to apply `family = \"kanit\"` here as well, as geoms are not part of the `theme()` and thus this `geom_text()` knows nothing about Kanit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  geom_text(\n    mapping = aes(label = round(lifeExp), group = fct_rev(year)), \n    position = position_dodge(width = 0.9),\n    hjust = 1.1,\n    color = \"white\",\n    family = \"kanit\"\n  )\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=100%}\n:::\n:::\n\n\n### remove legend\n\nThis comes down to personal preferences, but we could remove the legend entirely by instead coloring the subtitle in a way that clarifies what the colors stand for. Here this means that 1952 should be orange and 2007 blue. This is once more made possible via {ggtext} as it allows to use HTML rendering for text in ggplot. This means e.g. that that writing `A <b style='color:red;'> red </b> word` results in \"A <b style='color:red;'> red </b> word\". Let us therefore rewrite the subtitle accordingly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_long_subtitle <- \"In the mid-twentieth century, global life expectancy was shaped by post-war recovery, with variations across countries. As decades progressed, public health advances and socioeconomic growth painted a new picture of longevity. The data now reflect a world where life expectancy in <b style='color:#37A9E1;'>2007</b> often mirrors an improved quality of life compared to <b style='color:#F7AA59;'>1952</b>.\"\n\np <- p +\n  labs(\n    title = \"LIFE EXPECTANCY\",\n    subtitle = new_long_subtitle\n  ) +\n  guides(fill = \"none\") \n  # Be aware that we don't need to do this \n  # > theme(plot.subtitle = ggtext::element_textbox_simple())\n  # here because we already did so earlier to have \n  # automatic line breaks, but without formatting \n  # the subtitle as a ggtext element, it would\n  # not understand the html commnand.\n  \np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=100%}\n:::\n:::\n\n\n## Checkpoint 1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Current plot in single code chunk\"}\ndat <- gapminder::gapminder %>%\n  filter(year == 1952 | year == 2007) %>%\n  filter(\n    country %in% c(\n      \"Canada\",\n      \"Germany\",\n      \"Japan\",\n      \"Netherlands\",\n      \"Nigeria\",\n      \"Vietnam\",\n      \"Zimbabwe\"\n    )\n  ) %>%\n  mutate(year = as.factor(year)) %>%\n  droplevels()\n\nsorted_countries <- dat %>%\n  filter(year == \"2007\") %>%\n  arrange(lifeExp) %>%\n  pull(country) %>%\n  as.character()\n\ndat <- dat %>% \n  mutate(country = fct_relevel(country, sorted_countries))\n\nsysfonts::font_add_google(\"Kanit\", \"kanit\")\nshowtext::showtext_auto()\n\nyear_colors <- c(\"1952\" = \"#F7AA59\", \"2007\" = \"#37A9E1\")\n\nnew_long_subtitle <- \"In the mid-twentieth century, global life expectancy was shaped by post-war recovery, with variations across countries. As decades progressed, public health advances and socioeconomic growth painted a new picture of longevity. The data now reflect a world where life expectancy in <b style='color:#37A9E1;'>2007</b> often mirrors an improved quality of life compared to <b style='color:#F7AA59;'>1952</b>.\"\n\np <- ggplot(data = dat) + # initialize ggplot with data\n  aes(x = lifeExp, y = country, fill = fct_rev(year)) + # map aesthetics, reverse factor levels for fill\n  geom_col(position = position_dodge()) + # create dodged bar plot\n  geom_text(\n    mapping = aes(label = round(lifeExp), group = fct_rev(year)), # add labels of rounded life expectancy\n    position = position_dodge(width = 0.9), # dodge text position to match bars\n    hjust = 1.1, # adjust horizontal alignment of text\n    color = \"white\", # set text color\n    family = \"kanit\" # set text font family\n  ) +\n  scale_y_discrete(\n    name = NULL, # remove y-axis title\n    expand = c(0,0) # remove extra space above and below in y-axis\n  ) + \n  scale_x_continuous(\n    name = NULL, # remove x-axis title\n    expand = expansion(mult = c(0, 0.05)) # add only 5% extra space above x-axis upper limit\n  ) +\n  scale_fill_manual(\n    guide = \"none\", # do not show legend for fill\n    name = \"Year\", # set legend title\n    limits = names(year_colors), # set limits for fill scale based on year\n    values = year_colors # map colors to years manually\n  ) +\n  labs(\n    title = \"LIFE EXPECTANCY\", # set plot title\n    subtitle = new_long_subtitle # set plot subtitle\n  ) +\n  theme_minimal(base_size = 12) + # use minimal theme with base font size\n  theme(\n    text = element_text(family = \"kanit\"), # set global text font family\n    plot.title.position = \"plot\", # position title inside plot area\n    plot.title = element_text(size = 15, face = \"bold\"), # customize plot title appearance\n    plot.subtitle = ggtext::element_textbox_simple(size = 10, margin = margin(0, 0, 5, 0)), # customize plot subtitle appearance\n    axis.line.y = element_blank(), # remove y-axis line\n    axis.text.x = element_text(color = \"#AAAAAA\"), # customize x-axis text color\n    axis.ticks.x = element_line(color = \"#AAAAAA\", linewidth = 0.4), # customize x-axis tick appearance\n    axis.ticks.length.x = unit(4, \"pt\"), # set x-axis tick length\n    axis.line.x = element_line(color = \"black\", linewidth = 0.6), # customize x-axis line appearance\n    legend.position = \"top\", # position legend at the top\n    legend.box.just = \"left\", # justify legend box to the left\n    legend.justification = \"left\", # justify legend text to the left\n    legend.margin = margin(0, 0, 0, -57, unit = \"pt\"), # adjust legend margin\n    legend.title = element_text(face = \"bold\"), # customize legend title appearance\n    legend.key.size = unit(0.4, \"cm\"), # set size of legend keys\n    panel.grid.minor = element_blank(), # remove minor grid lines\n    panel.grid.major.y = element_blank(), # remove major y-axis grid lines\n    panel.grid.major.x = element_line(linetype = \"dotted\", color = \"#AAAAAA\", linewidth = 0.3) # customize major x-axis grid lines\n  )\n\np\n```\n:::\n\n\n## Dumbbell plot\n\nWhen it comes to visualizing changes or differences between two data points (like life expectancy across two different years in our case), dumbbell plots can offer a clearer and more direct comparison than grouped bar plots. While grouped bar plots efficiently display the individual values, dumbbell plots excel in highlighting the actual change or difference between these values. They connect the two data points with a line, making it visually immediate to see the extent of change. This is particularly beneficial in cases where the focus of the analysis is on the change itself rather than the absolute values. Moreover, dumbbell plots reduce clutter and can be easier to read when dealing with a large number of categories. By using different colors for the points and a subtle line to connect them, dumbbell plots provide a balanced emphasis on both the individual data points and their relative change, thereby offering a more nuanced view of the data. This makes them an excellent choice for our comparison of life expectancies over time.\n\nTo create such a dumbbell plot, we need a transformed, wide version of our data (more on long/wide format [here](https://schmidtpaul.github.io/dsfair_quarto/ch/rbasics/tidyverse.html#longwide-format)):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_lifeExp_wide <- dat %>% \n  select(country, year, lifeExp) %>% \n  pivot_wider(names_from = year, values_from = lifeExp, names_prefix = 'year_')\n\ndat_lifeExp_wide\n#> # A tibble: 7 Ã— 3\n#>   country     year_1952 year_2007\n#>   <fct>           <dbl>     <dbl>\n#> 1 Canada           68.8      80.7\n#> 2 Germany          67.5      79.4\n#> 3 Japan            63.0      82.6\n#> 4 Netherlands      72.1      79.8\n#> 5 Nigeria          36.3      46.9\n#> 6 Vietnam          40.4      74.2\n#> 7 Zimbabwe         48.5      43.5\n```\n:::\n\n\nFurthermore, we need most of what we did so far again with our ggplot object `p` again, but we do need to make some changes, which is why it makes sense to recreate `p2` from scratch. All the theme elements will stay the same for now, so let's wrap them in our own custom theme:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_nature <- function(base_size = 12) {\n  theme_minimal(base_size = base_size) +\n    theme(\n      text = element_text(family = \"kanit\"),\n      plot.title.position = \"plot\",\n      plot.title = element_text(size = 15, face = \"bold\"),\n      plot.subtitle = ggtext::element_textbox_simple(size = 10, margin = margin(0, 0, 10, 0)),\n      axis.line.y = element_blank(),\n      axis.text.x = element_text(color = \"#AAAAAA\"),\n      axis.ticks.x = element_line(color = \"#AAAAAA\", linewidth = 0.4),\n      axis.ticks.length.x = unit(4, \"pt\"),\n      axis.line.x = element_line(color = \"black\", linewidth = 0.6),\n      legend.position = \"top\",\n      legend.box.just = \"left\",\n      legend.justification = \"left\",\n      legend.margin = margin(0, 0, 0,-57, unit = \"pt\"),\n      legend.title = element_text(face = \"bold\"),\n      legend.key.size = unit(0.4, \"cm\"),\n      panel.grid.minor = element_blank(),\n      panel.grid.major.y = element_blank(),\n      panel.grid.major.x = element_line(\n        linetype = \"dotted\",\n        color = \"#AAAAAA\",\n        linewidth = 0.3\n      )\n    )\n}\n```\n:::\n\n\nThus, when using our newly created `theme_nature()`, we can focus on the changes in the other parts of our ggplot we made even before adding any new geoms:\n\n-   in the general `aes()` we use `color = fct_rev(year)` instead of `fill = fct_rev(year)`\n-   accordingly, we also use `scale_color_manual()` instead of `scale_fill_manual()`\n-   Above, we turned off the legend in a later step via `guides(fill = \"none\")`. This time, we immediately set `guide = \"none\"` within `scale_color_manual()`.\n-   we actually do want extra space beyond the limits for both axes so we remove the `expand =` statements\n-   we no longer need bars created via `geom_col()`\n-   we no longer the labels created via `geom_text()`\n\nGiven this, we have a well-prepared ggplot in need of geoms:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2_base <- ggplot(data = dat) +\n  aes(x = lifeExp, y = country, color = fct_rev(year)) +\n  scale_color_manual(\n    name = \"Year\",\n    limits = c(\"1952\", \"2007\"), \n    values = year_colors, \n    guide = \"none\"\n  ) +\n  scale_y_discrete(\n    name = NULL,\n  ) + \n  scale_x_continuous(\n    name = NULL,\n  ) +\n  labs(\n    title = \"LIFE EXPECTANCY\",\n    subtitle = new_long_subtitle\n  ) +\n  theme_nature()\n\np2_base\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){width=100%}\n:::\n:::\n\n\nWe only need two geoms to create a dumbbell plot here: [`geom_segment()`](https://ggplot2.tidyverse.org/reference/geom_segment.html) draws a straight line between points (`x`, `y`) and (`xend`, `yend`), which works nicely with the `dat_lifeExp_wide` created above. Note that the `color = \"#AAAAAA\"` overrides the `color = fct_rev(year)` from the general `aes()` that would otherwise apply. The points are automatically created and colored via `geom_point()` based on `dat` and the general `aes()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <- p2_base +\n  geom_segment(\n    data = dat_lifeExp_wide,\n    aes(x = year_1952, xend = year_2007, y = country, yend = country),\n    color = \"#AAAAAA\",\n    linewidth = 1\n  ) +\n  geom_point(size = 3)\n\np2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=100%}\n:::\n:::\n\n\n### labels again\n\nOnce again we can decide additionally have data points labeled with their values. We can easily add the rounded life expectancy above each point by basically using the same general aesthetics as `geom_point()` but vertically justifying a bit upwards.\n\nYet, even more informative is the actual difference between 2007 and 1952. For that, we can use `dat_lifeExp_wide` again where we already have one column per year and can subtract them into a new column `diff`. For easier readability we then format that result by first rounding it and then making it into a string `diff_lab` that always displays \"+\" or \"-\" in front of the respective number. I want to position this label on the right side of each dumbbell and could easily do so if the life expectancy were always higher for 2007 but this is not the case for Zimbabwe. Thus, I am also creating a helper column `max_x` which is simply the maximum life expectancy of the two years or in other words the right side of the dumbbell. We now have everything we need to use a second `geom_text` where we use `dat = dat_lifeExp_wide` instead of the dataset provided in `ggplot(data = dat)` and set the aesthetics as `aes(x = max_x, label = diff_lab)`. So far, our labels would be on top of the point of the right side of the dumbbell. Thus, we add `position = position_nudge(x = 1)` to nudge the position for the label one year to the right and additionally use `hjust = 0` so that the label is not centered but instead left-aligned to that nudged position.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_lifeExp_wide <- dat_lifeExp_wide %>% \n  mutate(\n    max_x = pmax(year_2007, year_1952),\n    diff = year_2007 - year_1952,\n    diff_lab = sprintf(\"%+d\", round(diff))\n  )\n\np2 <- p2 +\n  geom_text(\n    mapping = aes(label = round(lifeExp)),\n    size = 2.5,\n    vjust = -1,\n    family = \"kanit\"\n  ) +\n  geom_text(\n    data = dat_lifeExp_wide,\n    mapping = aes(x = max_x, label = diff_lab),\n    size = 2.5,\n    hjust = 0,\n    position = position_nudge(x = 1),\n    color = \"#AAAAAA\",\n    family = \"kanit\"\n  )\n\np2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){width=100%}\n:::\n:::\n\n\n## Checkpoint 2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Current plot in single code chunk\"}\ndat <- gapminder::gapminder %>%\n  filter(year == 1952 | year == 2007) %>%\n  filter(\n    country %in% c(\n      \"Canada\",\n      \"Germany\",\n      \"Japan\",\n      \"Netherlands\",\n      \"Nigeria\",\n      \"Vietnam\",\n      \"Zimbabwe\"\n    )\n  ) %>%\n  mutate(year = as.factor(year)) %>%\n  droplevels()\n\nsorted_countries <- dat %>%\n  filter(year == \"2007\") %>%\n  arrange(lifeExp) %>%\n  pull(country) %>%\n  as.character()\n\ndat <- dat %>% \n  mutate(country = fct_relevel(country, sorted_countries))\n\ndat_lifeExp_wide <- dat %>% \n  select(country, year, lifeExp) %>% \n  pivot_wider(names_from = year, values_from = lifeExp, names_prefix = 'year_')\n\ndat_lifeExp_wide <- dat_lifeExp_wide %>% \n  mutate(\n    max_x = pmax(year_2007, year_1952),\n    diff = year_2007 - year_1952,\n    diff_lab = sprintf(\"%+d\", round(diff))\n  )\n\nsysfonts::font_add_google(\"Kanit\", \"kanit\")\nshowtext::showtext_auto()\n\ntheme_nature <- function(base_size = 12) {\n  theme_minimal(base_size = base_size) +\n    theme(\n      text = element_text(family = \"kanit\"),\n      plot.title.position = \"plot\",\n      plot.title = element_text(size = 15, face = \"bold\"),\n      plot.subtitle = ggtext::element_textbox_simple(size = 10, margin = margin(0, 0, 10, 0)),\n      axis.line.y = element_blank(),\n      axis.text.x = element_text(color = \"#AAAAAA\"),\n      axis.ticks.x = element_line(color = \"#AAAAAA\", linewidth = 0.4),\n      axis.ticks.length.x = unit(4, \"pt\"),\n      axis.line.x = element_line(color = \"black\", linewidth = 0.6),\n      legend.position = \"top\",\n      legend.box.just = \"left\",\n      legend.justification = \"left\",\n      legend.margin = margin(0, 0, 0,-57, unit = \"pt\"),\n      legend.title = element_text(face = \"bold\"),\n      legend.key.size = unit(0.4, \"cm\"),\n      panel.grid.minor = element_blank(),\n      panel.grid.major.y = element_blank(),\n      panel.grid.major.x = element_line(\n        linetype = \"dotted\",\n        color = \"#AAAAAA\",\n        linewidth = 0.3\n      )\n    )\n}\n\nyear_colors <- c(\"1952\" = \"#F7AA59\", \"2007\" = \"#37A9E1\")\n\nnew_long_subtitle <- \"In the mid-twentieth century, global life expectancy was shaped by post-war recovery, with variations across countries. As decades progressed, public health advances and socioeconomic growth painted a new picture of longevity. The data now reflect a world where life expectancy in <b style='color:#37A9E1;'>2007</b> often mirrors an improved quality of life compared to <b style='color:#F7AA59;'>1952</b>.\"\n\np2 <- ggplot(data = dat) +\n  aes(x = lifeExp, y = country, color = fct_rev(year)) +\n  geom_segment(\n    data = dat_lifeExp_wide,\n    aes(x = year_1952, xend = year_2007, y = country, yend = country),\n    color = \"#AAAAAA\",\n    linewidth = 1\n  ) +\n  geom_point(size = 3) +\n    geom_text(\n    mapping = aes(label = round(lifeExp)),\n    size = 2.5,\n    vjust = -1,\n    family = \"kanit\"\n  ) +\n  geom_text(\n    data = dat_lifeExp_wide,\n    mapping = aes(x = max_x, label = diff_lab),\n    size = 2.5,\n    hjust = 0,\n    position = position_nudge(x = 1),\n    color = \"#AAAAAA\",\n    family = \"kanit\"\n  ) +\n  scale_color_manual(\n    name = \"Year\",\n    limits = c(\"1952\", \"2007\"), \n    values = year_colors, \n    guide = \"none\"\n  ) +\n  scale_y_discrete(\n    name = NULL,\n  ) + \n  scale_x_continuous(\n    name = NULL,\n  ) +\n  labs(\n    title = \"LIFE EXPECTANCY\",\n    subtitle = new_long_subtitle\n  ) +\n  theme_nature()\n\np2\n```\n:::\n\n\n# Part 3: Multiple plots\n\nLet us take a step back and look at our data again to realize that we also have information about population and GDP per capita for each country in each year:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat\n#> # A tibble: 14 Ã— 6\n#>    country     continent year  lifeExp       pop gdpPercap\n#>    <fct>       <fct>     <fct>   <dbl>     <int>     <dbl>\n#>  1 Canada      Americas  1952     68.8  14785584    11367.\n#>  2 Canada      Americas  2007     80.7  33390141    36319.\n#>  3 Germany     Europe    1952     67.5  69145952     7144.\n#>  4 Germany     Europe    2007     79.4  82400996    32170.\n#>  5 Japan       Asia      1952     63.0  86459025     3217.\n#>  6 Japan       Asia      2007     82.6 127467972    31656.\n#>  7 Netherlands Europe    1952     72.1  10381988     8942.\n#>  8 Netherlands Europe    2007     79.8  16570613    36798.\n#>  9 Nigeria     Africa    1952     36.3  33119096     1077.\n#> 10 Nigeria     Africa    2007     46.9 135031164     2014.\n#> 11 Vietnam     Asia      1952     40.4  26246839      605.\n#> 12 Vietnam     Asia      2007     74.2  85262356     2442.\n#> 13 Zimbabwe    Africa    1952     48.5   3080907      407.\n#> 14 Zimbabwe    Africa    2007     43.5  12311143      470.\n```\n:::\n\n\nThus, we could simply create the same ggplot three times: once for each variable. While this is certainly an option and call for packages such as [{patchwork}](https://patchwork.data-imaginist.com/) or [{cowplot}](https://wilkelab.org/cowplot/index.html), we can also achieve our goal via facets within the same ggplot.\n\n## data prep\n\nTo do that, we need to restructure our data so that all values are in the same column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_long <- dat %>%\n  pivot_longer(\n    cols = c(lifeExp, pop, gdpPercap),\n    names_to = \"statistic\",\n    values_to = \"value\"\n  )\n\ndat_long\n#> # A tibble: 42 Ã— 5\n#>    country continent year  statistic      value\n#>    <fct>   <fct>     <fct> <chr>          <dbl>\n#>  1 Canada  Americas  1952  lifeExp         68.8\n#>  2 Canada  Americas  1952  pop       14785584  \n#>  3 Canada  Americas  1952  gdpPercap    11367. \n#>  4 Canada  Americas  2007  lifeExp         80.7\n#>  5 Canada  Americas  2007  pop       33390141  \n#>  6 Canada  Americas  2007  gdpPercap    36319. \n#>  7 Germany Europe    1952  lifeExp         67.5\n#>  8 Germany Europe    1952  pop       69145952  \n#>  9 Germany Europe    1952  gdpPercap     7144. \n#> 10 Germany Europe    2007  lifeExp         79.4\n#> # â„¹ 32 more rows\n```\n:::\n\n\nMoreover, we need a `dat_all_wide` instead of the `dat_lifeExp_wide` from above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_all_wide <- dat_long %>% \n  pivot_wider(names_from = year, values_from = value, names_prefix = 'year_') %>% \n    mutate(\n    max_x = pmax(year_2007, year_1952),\n    diff = year_2007 - year_1952,\n    diff_lab = sprintf(\"%+d\", round(diff))\n  )\n```\n:::\n\n\nFinally, besides changing title and subtitle, the most important change is to add `facet_wrap(facets = ~ statistic, scales = \"free_x\")` so that we get one plot per value in the `statistic` column while their x-axes are allowed to have different scales:\n\n## facets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanother_long_subtitle <- paste0(\"In <b style='color:\", year_colors[[\"2007\"]], \";'>2007</b>, compared to <b style='color:\", year_colors[[\"1952\"]],\";'>1952</b>, life expectancy, Gross Domestic Product (GDP) per capita, and population data collectively reflect significant advancements in health, economic prosperity, and demographic trends, illustrating an overall enhanced quality of life.\")\n\nggplot(data = dat_long) +\n  aes(x = value, y = country, color = fct_rev(year)) +\n  facet_wrap(facets = ~ statistic, scales = \"free_x\") +\n  scale_color_manual(\n    name = \"Year\",\n    limits = c(\"1952\", \"2007\"), \n    values = year_colors,\n    guide = \"none\"\n  ) +\n  labs(\n    title = \"GDP, LIFE EXPECTANCY & POPULATION\",\n    subtitle = another_long_subtitle\n  ) +\n  scale_y_discrete(\n    name = NULL,\n  ) + \n  scale_x_continuous(\n    name = NULL,\n  ) +\n  theme_nature() +\n  geom_segment(\n    data = dat_all_wide,\n    aes(x = year_1952, xend = year_2007, y = country, yend = country),\n    color = \"#AAAAAA\",\n    linewidth = 1\n  ) +\n  geom_point(size = 3) +\n  geom_text(\n    mapping = aes(label = round(value)),\n    size = 2.5,\n    vjust = -1,\n    family = \"kanit\"\n  ) +\n  geom_text(\n    data = dat_all_wide,\n    mapping = aes(x = max_x, label = diff_lab),\n    size = 2.5,\n    hjust = 0,\n    position = position_nudge(x = 1),\n    color = \"#AAAAAA\",\n    family = \"kanit\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-1.png){width=100%}\n:::\n:::\n\n\n## individual labels\n\nSo technically this worked, but it obviously needs some tweaking. First, the facets should have nicer labels than just the variable names. Moreover, while it is helpful that the x-axes of the different facets were allowed to have different scales/limits, the vast difference between magnitude of the three variables leads to problematic labels for both the axes and inside the plot. As a result, simply rounding the numbers is still appropriate for life expectancy, but not for the other two. We therefore create a new column `value_lab` in which labels for each point are defined depending on what statistic it is. A convenient way to create such formatted numbers is the `scales::number()` function. Besides `value_lab` in `dat_long`, we also recreate `diff_lab` in `dat_all_wide` this way, additionally adding the +/-. Finally note that also the method of positioning the label on the right side of the dumbbell no longer works. One way of fixing it is also creating a new column `x_pos_lab` which adds a certain value to `max_x` depending on the statistic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_long <- dat_long %>% \n  mutate(value_lab = case_when(\n    statistic == \"lifeExp\"   ~ number(value, accuracy = 1),\n    statistic == \"pop\"       ~ number(value, accuracy = 1,   scale = 1/1000000, suffix = \"m\"),\n    statistic == \"gdpPercap\" ~ number(value, accuracy = 0.1, scale = 1/1000,    suffix = \"k\")\n  ))\n\ndat_all_wide <- dat_all_wide %>%\n  mutate(\n    diff_lab = case_when(\n      statistic == \"lifeExp\"   ~ number(\n        diff,\n        style_positive = \"plus\",\n        style_negative = \"minus\",\n        accuracy = 1\n      ),\n      statistic == \"pop\"       ~ number(\n        diff,\n        style_positive = \"plus\",\n        style_negative = \"minus\",\n        accuracy = 1,\n        scale = 1 / 1000000,\n        suffix = \"m\"\n      ),\n      statistic == \"gdpPercap\" ~ number(\n        diff,\n        style_positive = \"plus\",\n        style_negative = \"minus\",\n        accuracy = 0.1,\n        scale = 1 / 1000,\n        suffix = \"k\"\n      )\n    ),\n    x_pos_lab = case_when(\n      statistic == \"lifeExp\"   ~ max_x + 3,\n      statistic == \"pop\"       ~ max_x + 10000000,\n      statistic == \"gdpPercap\" ~ max_x + 3000\n    )\n  )\n```\n:::\n\n\nWe can then apply these new labels to our faceted ggplot. We also provide labels per facet via `labeller = labeller(statistic = ...)`. Finally note that even though we shortened the labels, they will still overlap in some cases where the points are too close to each other. One solution is to have the 1952-label below and the 2007-label above the point which can be achived by moving the `vjust` inside the `aes()` and having it depend on the year via `vjust = if_else(year == \"1952\", 2, -1)`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfacet_labels <- c(lifeExp = \"Life Expectancy [years]\", pop = \"Population\", gdpPercap = \"GDP per Capita [$]\")\n\np3 <- ggplot(data = dat_long) +\n  aes(x = value, y = country, color = fct_rev(year)) +\n  facet_wrap(\n    facets = ~ statistic,\n    scales = \"free_x\",\n    labeller = labeller(statistic = facet_labels)\n  ) +\n  scale_color_manual(\n    name = \"Year\",\n    limits = c(\"1952\", \"2007\"), \n    values = year_colors,\n    guide = \"none\"\n  ) +\n  scale_y_discrete(\n    name = NULL,\n  ) + \n  scale_x_continuous(\n    name = NULL,\n  ) +\n  labs(\n    title = \"GDP, LIFE EXPECTANCY & POPULATION\",\n    subtitle = another_long_subtitle\n  ) +\n  theme_nature() +\n  theme(\n    panel.spacing = unit(1, \"lines\"),\n    strip.background = element_rect(fill = NA, color = \"black\")\n  ) +\n  geom_segment(\n    data = dat_all_wide,\n    aes(x = year_1952, xend = year_2007, y = country, yend = country),\n    color = \"#AAAAAA\",\n    linewidth = 1\n  ) +\n  geom_point(size = 3) +\n  geom_text(\n    mapping = aes(label = value_lab, vjust = if_else(year == \"1952\", 2, -1)),\n    size = 2.5,\n    family = \"kanit\"\n  ) +\n  geom_text(\n    data = dat_all_wide,\n    mapping = aes(x = x_pos_lab, label = diff_lab),\n    size = 2.5,\n    hjust = 0,\n    color = \"#AAAAAA\",\n    family = \"kanit\"\n  )\n\np3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-41-1.png){width=100%}\n:::\n:::\n\n\n## individual scales\n\nHowever, the axes are still not optimal for two reasons: The axis labels do not look good except for Life Expectancy and the labels inside the plots are sometimes cut off due to the axis limits. Adjusting axes per facet is actually not possible/straightforward via {ggplot2} so we need load [{ggh4x}](https://teunbrand.github.io/ggh4x/index.html) to make use of `facetted_pos_scales`. Note that we can use `labels = scales::number_format()` in basically the same way as we used `scales::number()` above. Moreover, we choose good combinations of `limits` and `expand` to make sure no labels are cut off and finally pick `breaks` via the convenient `scales::breaks_width()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np3 <- p3 + facetted_pos_scales(\n  x = list(\n    statistic == \"lifeExp\" ~ scale_x_continuous(\n      limits = c(35, 90),\n      breaks = breaks_width(20),\n      labels = number_format(accuracy = 1)\n    ),\n    statistic == \"pop\" ~ scale_x_continuous(\n      limits = c(0, 150000000),\n      expand = expansion(mult = c(0.05, 0.2)),\n      breaks = breaks_width(50000000),\n      labels = number_format(\n        accuracy = 1,\n        scale = 1 / 1000000,\n        suffix = \"m\"\n      )\n    ),\n    statistic == \"gdpPercap\" ~ scale_x_continuous(\n      limits = c(0, 50000),\n      expand = expansion(mult = c(0.075, 0.075)),\n      breaks = breaks_width(25000),\n      labels = number_format(\n        accuracy = 1,\n        scale = 1 / 1000,\n        suffix = \"k\"\n      )\n    )\n  )\n) + xlab(NULL) # apparently necessary?!\n\np3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-1.png){width=100%}\n:::\n:::\n\n\n## Checkpoint 3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Current plot in single code chunk\"}\ndat <- gapminder::gapminder %>%\n  filter(year == 1952 | year == 2007) %>%\n  filter(\n    country %in% c(\n      \"Canada\",\n      \"Germany\",\n      \"Japan\",\n      \"Netherlands\",\n      \"Nigeria\",\n      \"Vietnam\",\n      \"Zimbabwe\"\n    )\n  ) %>%\n  mutate(year = as.factor(year)) %>%\n  droplevels()\n\nsorted_countries <- dat %>%\n  filter(year == \"2007\") %>%\n  arrange(lifeExp) %>%\n  pull(country) %>%\n  as.character()\n\ndat <- dat %>% \n  mutate(country = fct_relevel(country, sorted_countries))\n\ndat_long <- dat %>%\n  pivot_longer(\n    cols = c(lifeExp, pop, gdpPercap),\n    names_to = \"statistic\",\n    values_to = \"value\"\n  )\n\ndat_all_wide <- dat_long %>% \n  pivot_wider(names_from = year, values_from = value, names_prefix = 'year_') %>% \n  mutate(\n    max_x = pmax(year_2007, year_1952),\n    diff = year_2007 - year_1952,\n    diff_lab = sprintf(\"%+d\", round(diff))\n  )\n\ndat_long <- dat_long %>% \n  mutate(value_lab = case_when(\n    statistic == \"lifeExp\"   ~ number(value, accuracy = 1),\n    statistic == \"pop\"       ~ number(value, accuracy = 1,   scale = 1/1000000, suffix = \"m\"),\n    statistic == \"gdpPercap\" ~ number(value, accuracy = 0.1, scale = 1/1000,    suffix = \"k\")\n  ))\n\ndat_all_wide <- dat_all_wide %>%\n  mutate(\n    diff_lab = case_when(\n      statistic == \"lifeExp\"   ~ number(\n        diff,\n        style_positive = \"plus\",\n        style_negative = \"minus\",\n        accuracy = 1\n      ),\n      statistic == \"pop\"       ~ number(\n        diff,\n        style_positive = \"plus\",\n        style_negative = \"minus\",\n        accuracy = 1,\n        scale = 1 / 1000000,\n        suffix = \"m\"\n      ),\n      statistic == \"gdpPercap\" ~ number(\n        diff,\n        style_positive = \"plus\",\n        style_negative = \"minus\",\n        accuracy = 0.1,\n        scale = 1 / 1000,\n        suffix = \"k\"\n      )\n    ),\n    x_pos_lab = case_when(\n      statistic == \"lifeExp\"   ~ max_x + 3,\n      statistic == \"pop\"       ~ max_x + 10000000,\n      statistic == \"gdpPercap\" ~ max_x + 3000\n    )\n  )\n\nsysfonts::font_add_google(\"Kanit\", \"kanit\")\nshowtext::showtext_auto()\n\nyear_colors <- c(\"1952\" = \"#F7AA59\", \"2007\" = \"#37A9E1\")\n\nanother_long_subtitle <- paste0(\"In <b style='color:\", year_colors[[\"2007\"]], \";'>2007</b>, compared to <b style='color:\", year_colors[[\"1952\"]],\";'>1952</b>, life expectancy, Gross Domestic Product (GDP) per capita, and population data collectively reflect significant advancements in health, economic prosperity, and demographic trends, illustrating an overall enhanced quality of life.\")\n\nfacet_labels <- c(lifeExp = \"Life Expectancy [years]\", pop = \"Population\", gdpPercap = \"GDP per Capita [$]\")\n\np3 <- ggplot(data = dat_long) +\n  aes(x = value, y = country, color = fct_rev(year)) +\n  geom_segment(\n    data = dat_all_wide,\n    aes(x = year_1952, xend = year_2007, y = country, yend = country),\n    color = \"#AAAAAA\",\n    linewidth = 1\n  ) +\n  geom_point(size = 3) +\n  geom_text(\n    mapping = aes(label = value_lab, vjust = if_else(year == \"1952\", 2, -1)),\n    size = 2.5,\n    family = \"kanit\"\n  ) +\n  geom_text(\n    data = dat_all_wide,\n    mapping = aes(x = x_pos_lab, label = diff_lab),\n    size = 2.5,\n    hjust = 0,\n    color = \"#AAAAAA\",\n    family = \"kanit\"\n  ) + \n  facet_wrap(\n    facets = ~ statistic,\n    scales = \"free_x\",\n    labeller = labeller(statistic = facet_labels)\n  ) +\n  scale_color_manual(\n    name = \"Year\",\n    limits = c(\"1952\", \"2007\"), \n    values = year_colors,\n    guide = \"none\"\n  ) +\n  scale_y_discrete(\n    name = NULL,\n  ) + \n  scale_x_continuous(\n    name = NULL,\n  ) +\n  labs(\n    title = \"GDP, LIFE EXPECTANCY & POPULATION\",\n    subtitle = another_long_subtitle\n  ) +\n  theme_nature() +\n  theme(\n    panel.spacing = unit(1, \"lines\"),\n    strip.background = element_rect(fill = NA, color = \"black\")\n  ) +\n  facetted_pos_scales(\n    x = list(\n      statistic == \"lifeExp\" ~ scale_x_continuous(\n        limits = c(35, 90),\n        breaks = breaks_width(20),\n        labels = number_format(accuracy = 1)\n      ),\n      statistic == \"pop\" ~ scale_x_continuous(\n        limits = c(0, 150000000),\n        expand = expansion(mult = c(0.05, 0.2)),\n        breaks = breaks_width(50000000),\n        labels = number_format(\n          accuracy = 1,\n          scale = 1 / 1000000,\n          suffix = \"m\"\n        )\n      ),\n      statistic == \"gdpPercap\" ~ scale_x_continuous(\n        limits = c(0, 50000),\n        expand = expansion(mult = c(0.075, 0.075)),\n        breaks = breaks_width(25000),\n        labels = number_format(\n          accuracy = 1,\n          scale = 1 / 1000,\n          suffix = \"k\"\n        )\n      )\n    )\n  ) + \n  xlab(NULL) # apparently necessary?!\n\np3\n```\n:::\n\n\n:::callout-tip\n## Bonus\n\n- [ggplot2 extenstions gallery](https://exts.ggplot2.tidyverse.org/gallery/)\n- If you can, try to find the GitHub page for a package, not its CRAN page (with a downloadable pdf). This is because the GitHub page will have a much more accessible documentation. For example, the GitHub page for {gganimate} is [here](https://gganimate.com/), while its CRAN page is [here](https://cran.r-project.org/web/packages/gganimate/index.html).\n- [How I use ggplot2](https://schmidtpaul.github.io/dsfair_quarto/ch/summaryarticles/ggplot2intro.html)\n- [GitHub repositories dealing with plots which I gave a Star](https://github.com/stars/SchmidtPaul/lists/plots)\n- [Cedric Scherer's blog & Gallery](https://www.cedricscherer.com/)\n- [{{< fa brands youtube >}} Albert Rapp](https://www.youtube.com/@rappa753)\n- [{{< fa brands youtube >}} R for the Rest of Us](https://www.youtube.com/@rfortherestofus)\n- [{{< fa brands youtube >}} Milos Makes Maps](https://www.youtube.com/@milos-makes-maps)\n\n:::\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}