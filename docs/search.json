[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tutorial: Advanced data visualization in R",
    "section": "",
    "text": "This is the supporting material for the tutorial Advanced data visualization in R which is part of the 70th Biometrical Colloquium 2024 in Luebeck and takes place 28.02.2024 09:00-12:00. Here is the tutorial description as displayed on the website’s conference program:"
  },
  {
    "objectID": "index.html#export-and-open-file",
    "href": "index.html#export-and-open-file",
    "title": "Tutorial: Advanced data visualization in R",
    "section": "Export and open file",
    "text": "Export and open file\nTo avoid the issue, you may simply never look at the preview of your ggplot in RStudio and instead always export your plot to then look at the exported file. Exporting a ggplot is flexible and convenient. You can choose a device function (e.g. png) or “eps”, “ps”, “tex” (pictex), “pdf”, “jpeg”, “tiff”, “png”, “bmp”, “svg” or “wmf” (windows only). Furthermore, you can set width and height in a unit of your choice and depending on your file type even choose the dpi and more.\n\nggsave(\n  filename = \"myfile.png\",\n  plot = myplot,\n  width = 6, \n  height = 4,\n  units = \"in\",\n  dpi = 300\n) \n\nYou don’t even need to manually open the file after creating it if you instead run this:\n\nsystem('open \"myfile.png\"')"
  },
  {
    "objectID": "index.html#use-camcorder",
    "href": "index.html#use-camcorder",
    "title": "Tutorial: Advanced data visualization in R",
    "section": "Use {camcorder}",
    "text": "Use {camcorder}\nThere is a package called {camcorder} which advertises its “eventual goal of creating a GIF showing all the plots saved sequentially during the design process” like in these examples. However, I am not the only one using camcorder for its feature of fixing the canvas size. In other words: It shows your ggplot in the RStudio panel fixed to your chosen scale. Thus, simply run something like this at the beginning of your session so that all ggplots shown afterwards are exactly 6x4 inches wide with dpi 300:\n\n  camcorder::gg_record(\n    device = \"png\",\n    width = 6, \n    height = 4,\n    units = \"in\", \n    dpi = 300\n  )\n\nNote that it actually does not show up in RStudio’s “Plots” but in its “Viewer” panel. Furthermore, note that it actually saves the intermediate plots somewhere, but defaults to a temporary directory for that."
  },
  {
    "objectID": "index.html#data-prep",
    "href": "index.html#data-prep",
    "title": "Tutorial: Advanced data visualization in R",
    "section": "data prep",
    "text": "data prep\nThe data is courtesy of the Gapminder foundation and can easily be accessed via the {gapminder} package. We can then make use of the pipe operator %&gt;% to create a subset of the data via the filter() function. Then, in order for our ggplot to work as intended in the next step, we also need to format the year column as a factor instead of an integer value via mutate(). Both functions are from the {dplyr} package which we loaded as part of the {tidyverse}. Finally, we use droplevels() to get rid of the factor levels that are now no longer present in the data (i.e. the countries we did not filter for).\n\ndat &lt;- gapminder::gapminder %&gt;% \n  filter(year == 1952 | year == 2007) %&gt;% \n  filter(country %in% c(\"Canada\", \"Germany\", \"Japan\", \"Netherlands\", \"Nigeria\", \"Vietnam\", \"Zimbabwe\")) %&gt;% \n  mutate(year = as.factor(year)) %&gt;% \n  droplevels()\n\ndat\n#&gt; # A tibble: 14 × 6\n#&gt;    country     continent year  lifeExp       pop gdpPercap\n#&gt;    &lt;fct&gt;       &lt;fct&gt;     &lt;fct&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n#&gt;  1 Canada      Americas  1952     68.8  14785584    11367.\n#&gt;  2 Canada      Americas  2007     80.7  33390141    36319.\n#&gt;  3 Germany     Europe    1952     67.5  69145952     7144.\n#&gt;  4 Germany     Europe    2007     79.4  82400996    32170.\n#&gt;  5 Japan       Asia      1952     63.0  86459025     3217.\n#&gt;  6 Japan       Asia      2007     82.6 127467972    31656.\n#&gt;  7 Netherlands Europe    1952     72.1  10381988     8942.\n#&gt;  8 Netherlands Europe    2007     79.8  16570613    36798.\n#&gt;  9 Nigeria     Africa    1952     36.3  33119096     1077.\n#&gt; 10 Nigeria     Africa    2007     46.9 135031164     2014.\n#&gt; 11 Vietnam     Asia      1952     40.4  26246839      605.\n#&gt; 12 Vietnam     Asia      2007     74.2  85262356     2442.\n#&gt; 13 Zimbabwe    Africa    1952     48.5   3080907      407.\n#&gt; 14 Zimbabwe    Africa    2007     43.5  12311143      470."
  },
  {
    "objectID": "index.html#base-plot",
    "href": "index.html#base-plot",
    "title": "Tutorial: Advanced data visualization in R",
    "section": "base plot",
    "text": "base plot\nOne typical way you may find data like this visualized is via a grouped bar plot. The minimum amount of code to create such a plot via ggplot is this:\n\nggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = year) +\n  geom_col(position = position_dodge())\n\n\n\n\nRead this if you are not familiar with the general ggplot syntax. We need to add position = position_dodge() to geom_col(), since the default is to stack the multiple bars (for the different years) on top of each other (as seen in the Nature example plot below).\n(factor) level reordering\nIt may seem irritating that countries are sorted alphabetically starting at the bottom. Moreover, 1952 is below 2007 in the plot (but not in the legend!). This is because these two columns are formatted as factors in our data and by default factor levels are sorted alphabetically.\nNote that ggplot applies this factor level order, but does it so from bottom to top.\n\nlevels(dat$country)\n#&gt; [1] \"Canada\"      \"Germany\"     \"Japan\"       \"Netherlands\" \"Nigeria\"    \n#&gt; [6] \"Vietnam\"     \"Zimbabwe\"\n\nA useful package for dealing with factors in R is {forcats} whose functions all start with fct_*. One way of dealing with this is changing the factor level order in the data before passing it to ggplot. Here, we may simply reverse the order via fct_rev().\n\ndat &lt;- dat %&gt;% \n  mutate(across(c(country), ~ fct_rev(.x)))\n\n\nlevels(dat$country)\n#&gt; [1] \"Zimbabwe\"    \"Vietnam\"     \"Nigeria\"     \"Netherlands\" \"Japan\"      \n#&gt; [6] \"Germany\"     \"Canada\"\n\n\nggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = year) +\n  geom_col(position = position_dodge())\n\n\n\n\n\nAlternative 1# alternatively, you may apply fct_rev() inside aes() instead of altering the data beforehand \nggplot(data = dat) +\n  aes(x = lifeExp, y = fct_rev(country), fill = year) +\n  geom_col(position = position_dodge())\n\n\n\nAlternative 2# alternatively, you may manually provide the levels in the desired order within scale_y_discrete()\nggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = year) +\n  geom_col(position = position_dodge()) +\n  scale_y_discrete(limits = c(\"Zimbabwe\", \"Vietnam\", \"Nigeria\", \"Netherlands\", \"Japan\", \"Germany\", \"Canada\"))\n\n\nHowever, it probably makes more sense to sort the countries according to the data. Here, we could sort them according to their life expectancy in 2007.\n\nsorted_countries &lt;- dat %&gt;% \n  filter(year == \"2007\") %&gt;% \n  arrange(lifeExp) %&gt;% \n  pull(country) %&gt;% \n  as.character()\n\ndat &lt;- dat %&gt;% \n  mutate(country = fct_relevel(country, sorted_countries))\n\nggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = year) +\n  geom_col(position = position_dodge())\n\n\n\n\nNext, we address the order of years in the plot and the legend. As you can see in the previous plots, once more the first factor level (1952) is on the bottom, while the second level (2007) is on top. Thus, we could use one of the approaches shown for country to change that. More precisely, let’s take the approach of Alternative 1 and use fct_rev() inside the aes().\nNote however, that while this changes the order of the years in the plot, it does not affect their order in the legend. To address that, we can use the limits = argument in scale_fill_manual() (which corresponds to Alternative 2 above):\n\nggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = fct_rev(year)) +\n  geom_col(position = position_dodge()) +\n  scale_fill_discrete(limits = c(\"1952\", \"2007\"))\n\n\n\n\n\nAlternative# alternatively, you may reverse the legend order via guides()\nggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = fct_rev(year)) +\n  geom_col(position = position_dodge()) +\n  guides(fill = guide_legend(reverse = TRUE))"
  },
  {
    "objectID": "index.html#reproducing-a-theme",
    "href": "index.html#reproducing-a-theme",
    "title": "Tutorial: Advanced data visualization in R",
    "section": "reproducing a theme",
    "text": "reproducing a theme\nNow that we’ve got the basics correct, the next thing I would want to change is things like the theme, i.e. the non-data components of the plot: titles, labels, fonts, background, gridlines, and legends.\nUsing theme() allows us to format our plot in any way we want. Instead of picking things based on what feels good, let us here try to recreate the layout of a plot published in Nature in ‘150 years of Nature: a data graphic charts our evolution’ by Richard Monastersky & Richard Van Noorden (2019). URL to the plot.\n\nThus, a better starting point would be to use the complete theme theme_minimal() instead of the default theme_gray(). From here, we can further adjust things via theme().\nFurthermore, let’s also pick two of the colors used in that image (e.g. via any online color picker) for our years. We can create a named vector year_colors and when changing scale_fill_discrete() to scale_fill_manual() supply it via the values = argument.\nFinally, as our ggplot-code is getting longer, let’s start saving out current plot into an object p and reuse it.\n\nyear_colors &lt;- c(\"1952\" = \"#F7AA59\", \"2007\" = \"#37A9E1\")\n\np &lt;- ggplot(data = dat) +\n  aes(x = lifeExp, y = country, fill = fct_rev(year)) +\n  geom_col(position = position_dodge()) +\n  scale_fill_manual(\n    name = \"Year\",\n    limits = names(year_colors), \n    values = year_colors) +\n  theme_minimal(base_size = 12)\n\np\n\n\n\n\nfont\nTo further replicate the aesthetics of the Nature plot, we introduce a custom font named Kanit. This font, available through Google Fonts, has been chosen for its stylistic resemblance to the one used in the Nature publication.\nThe process begins by fetching the font from Google Fonts and making it available for use in our R session via sysfonts::font_add_google(\"Kanit\", \"kanit\"). Next, showtext::showtext_auto() activates the use of custom fonts in plots. It’s important to also run showtext::showtext_opts(dpi = 300) to avoid getting unexpected results. This is because showtext uses a default of 72 dpi, while e.g. exporting plots via ggsave() defaults to dpi = 300. Furthermore, you may also want the dpi to be 300 (or some other number) when rendering plots within your RMarkdown via knitr::opts_chunk$set(dpi = 300) or quarto document via fig-dpi: 300.\nWe add a title and subtitle via labs() and then apply the font to all text elements via text = element_text(family = \"kanit\"). For some reason, the default position of title and subtitle in a ggplot is left-aligned with the y-axis - to instead left-align it with the left side of the entire plot, we apply plot.title.position = \"plot\". Making the title a bit bigger and bold is straightforward. However, having a subtitle (or other text elements) that has automatic line breaks when the string is too long actually requires ggtext and more specifically a ggtext::element_textbox_simple() instead of the default ggplot2::element_text().\n\nsysfonts::font_add_google(\"Kanit\", \"kanit\")\nshowtext::showtext_auto()\n# We already did this above, but dont forget about it:\n# showtext::showtext_opts(dpi = 300)\n\nlong_subtitle &lt;- \"In the mid-twentieth century, global life expectancy was shaped by post-war recovery, with variations across countries. As decades progressed, public health advances and socioeconomic growth painted a new picture of longevity. The data now reflect a world where life expectancy in 2007 often mirrors an improved quality of life compared to 1952.\"\n\np &lt;- p +\n  labs(\n    title = \"LIFE EXPECTANCY\",\n    subtitle = long_subtitle\n  ) +\n  theme(text = element_text(family = \"kanit\")) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(size = 15, face = \"bold\"),\n    plot.subtitle = ggtext::element_textbox_simple(size = 10, margin = margin(0, 0, 5, 0))\n  )\n\np\n\n\n\n\naxes\nFor our specific goal, we start by removing the axis titles as well as unnecessary space beyond the limits of each axis. Furthermore, there should be no axis line for the y-axis and a relatively thick black line with grey ticks for the x-axis. More details on axis formatting can be found here.\n\np &lt;- p +\n  scale_y_discrete(\n    name = NULL, # remove title\n    expand = c(0,0) # no extra space above or below\n  ) + \n  scale_x_continuous(\n    name = NULL, # remove title\n    expand = expansion(mult = c(0, 0.05)) # only 5% extra space above upper limit\n  ) +\n  theme(\n    axis.line.y = element_blank(), # remove line on y-axis\n    axis.text.x = element_text(color = \"#AAAAAA\"), # x-axis label color\n    axis.ticks.x = element_line(color = \"#AAAAAA\", linewidth = 0.4), # x-axis tick color & width\n    axis.ticks.length.x = unit(4, \"pt\"), # x-axis tick length\n    axis.line.x = element_line(color = \"black\", linewidth = 0.6) # x-axis line color & width\n  )\n\np\n\n\n\n\nlegend\nOur legend is supposed to be above the plot and left-aligned. We partly achieve this via legend.position, legend.box.just and legend.justification, but unfortunately this does not fully achieve the goal. We want to have a legend that is left-aligned with respect to the entire plot, not to the y-axis. As far as I know and unlike plot.title.position = \"plot\" which we used above, there is no way of achieving this normally. Thus, we here use a hack by setting the left margin() of the legend to a negative value that looks good enough.\nBesides the position, the legend title is made bold via legend.title = element_text(face = \"bold\") and we force all elements of the legend to be in one row via guide_legend(title.position = \"left\", nrow = 1). Finally, the size of the colored squares in the legend is reduced via legend.key.size = unit(0.4, \"cm\").\n\np &lt;- p +\n  guides(\n    fill = guide_legend(\n      title.position = \"left\",\n      nrow = 1)\n  ) +\n  theme(\n    legend.position = \"top\",\n    legend.box.just = \"left\",\n    legend.justification = \"left\",\n    legend.margin = margin(0, 0, 0, -57, unit = \"pt\"),\n    legend.title = element_text(face = \"bold\"),\n    legend.key.size = unit(0.4, \"cm\")\n  )\n\np\n\n\n\n\ngrid lines\nLastly, we could adjust the grid lines. By default, ggplot has major and minor grid lines for both axes. Yet, we only want thin, dotted, grey lines for the major grid of the x-axis:\n\np &lt;- p +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(linetype = \"dotted\", color = \"#AAAAAA\", linewidth = 0.3)\n  )\n\np"
  },
  {
    "objectID": "index.html#improve-the-plot",
    "href": "index.html#improve-the-plot",
    "title": "Tutorial: Advanced data visualization in R",
    "section": "improve the plot",
    "text": "improve the plot\nWe have now mostly reproduced the layout of the Nature plot and applied it to our plot. At this point, we could try out things that may improve the plot.\nlabels\nIn certain cases it can be beneficial to additionally label data points. In this plot, we may simply label each bar with rounded life expectancy it represents. We here do so via geom_text() where aes(label = round(lifeExp)). Note that we also need to add group = fct_rev(year) here. This is because so far we applied fill = fct_rev(year) in the general aes() which led to different groups due to the different fill colors so that geom_col(position = position_dodge()) knew which groups/bars were supposed to be dodged. However, our labels created via geom_text() do not have a fill attribute but should still be dodged per year in the same way. Hence, group = fct_rev(year) is required and moreover, position_dodge(width = 0.9) actually needs a width value here set to the default dodge width for bars.\nOnce this is out the way, we make the text white and right-align it with extra space via a value for hjust that is larger than 1. Finally, don’t forget to apply family = \"kanit\" here as well, as geoms are not part of the theme() and thus this geom_text() knows nothing about Kanit.\n\np &lt;- p +\n  geom_text(\n    mapping = aes(label = round(lifeExp), group = fct_rev(year)), \n    position = position_dodge(width = 0.9),\n    hjust = 1.1,\n    color = \"white\",\n    family = \"kanit\"\n  )\n\np\n\n\n\n\nremove legend\nThis comes down to personal preferences, but we could remove the legend entirely by instead coloring the subtitle in a way that clarifies what the colors stand for. Here this means that 1952 should be orange and 2007 blue. This is once more made possible via {ggtext} as it allows to use HTML rendering for text in ggplot. This means e.g. that that writing A &lt;b style='color:red;'&gt; red &lt;/b&gt; word results in “A  red  word”. Let us therefore rewrite the subtitle accordingly:\n\nnew_long_subtitle &lt;- \"In the mid-twentieth century, global life expectancy was shaped by post-war recovery, with variations across countries. As decades progressed, public health advances and socioeconomic growth painted a new picture of longevity. The data now reflect a world where life expectancy in &lt;b style='color:#37A9E1;'&gt;2007&lt;/b&gt; often mirrors an improved quality of life compared to &lt;b style='color:#F7AA59;'&gt;1952&lt;/b&gt;.\"\n\np &lt;- p +\n  labs(\n    title = \"LIFE EXPECTANCY\",\n    subtitle = new_long_subtitle\n  ) +\n  guides(fill = \"none\") \n  # Be aware that we don't need to this here because we already\n  # did so earlier to have automatic line breaks, but without\n  # formatting the subtitle as a ggtext element, it would\n  # not understand the html commnand:\n  # theme(plot.subtitle = ggtext::element_textbox_simple())\n\np\n\n\n\n\ndumbbell plot\nWhen it comes to visualizing changes or differences between two data points (like life expectancy across two different years in our case), dumbbell plots can offer a clearer and more direct comparison than grouped bar plots. While grouped bar plots efficiently display the individual values, dumbbell plots excel in highlighting the actual change or difference between these values. They connect the two data points with a line, making it visually immediate to see the extent of change. This is particularly beneficial in cases where the focus of the analysis is on the change itself rather than the absolute values. Moreover, dumbbell plots reduce clutter and can be easier to read when dealing with a large number of categories. By using different colors for the points and a subtle line to connect them, dumbbell plots provide a balanced emphasis on both the individual data points and their relative change, thereby offering a more nuanced view of the data. This makes them an excellent choice for our comparison of life expectancies over time.\nTo create such a dumbbell plot, we need a transformed, wide version of our data (more on long/wide format here):\n\ndat_lifeExp_wide &lt;- dat %&gt;% \n  select(country, year, lifeExp) %&gt;% \n  pivot_wider(names_from = year, values_from = lifeExp, names_prefix = 'year_')\n\ndat_lifeExp_wide\n#&gt; # A tibble: 7 × 3\n#&gt;   country     year_1952 year_2007\n#&gt;   &lt;fct&gt;           &lt;dbl&gt;     &lt;dbl&gt;\n#&gt; 1 Canada           68.8      80.7\n#&gt; 2 Germany          67.5      79.4\n#&gt; 3 Japan            63.0      82.6\n#&gt; 4 Netherlands      72.1      79.8\n#&gt; 5 Nigeria          36.3      46.9\n#&gt; 6 Vietnam          40.4      74.2\n#&gt; 7 Zimbabwe         48.5      43.5\n\nFurthermore, we need most of what we did so far again with our ggplot object p again, but we do need to make some changes, which is why it makes sense to recreate p2 from scratch. All the theme elements will stay the same for now, so let’s wrap them in our own custom theme:\n\ntheme_nature &lt;- function(base_size = 12) {\n  theme_minimal(base_size = base_size) +\n    theme(\n      text = element_text(family = \"kanit\"),\n      plot.title.position = \"plot\",\n      plot.title = element_text(size = 15, face = \"bold\"),\n      plot.subtitle = ggtext::element_textbox_simple(size = 10, margin = margin(0, 0, 10, 0)),\n      axis.line.y = element_blank(),\n      axis.text.x = element_text(color = \"#AAAAAA\"),\n      axis.ticks.x = element_line(color = \"#AAAAAA\", linewidth = 0.4),\n      axis.ticks.length.x = unit(4, \"pt\"),\n      axis.line.x = element_line(color = \"black\", linewidth = 0.6),\n      legend.position = \"top\",\n      legend.box.just = \"left\",\n      legend.justification = \"left\",\n      legend.margin = margin(0, 0, 0,-57, unit = \"pt\"),\n      legend.title = element_text(face = \"bold\"),\n      legend.key.size = unit(0.4, \"cm\"),\n      panel.grid.minor = element_blank(),\n      panel.grid.major.y = element_blank(),\n      panel.grid.major.x = element_line(\n        linetype = \"dotted\",\n        color = \"#AAAAAA\",\n        linewidth = 0.3\n      )\n    )\n}\n\nThus, when using our newly created theme_nature(), we can focus on the changes in the other parts of our ggplot we made even before adding any new geoms:\n\nin the general aes() we use color = fct_rev(year) instead of fill = fct_rev(year)\n\naccordingly, we also use scale_color_manual() instead of scale_fill_manual()\n\nAbove, we turned off the legend in a later step via guides(fill = \"none\"). This time, we immediately set guide = \"none\" within scale_color_manual().\nwe actually do want extra space beyond the limits for both axes so we remove the expand = statements\nwe no longer need bars created via geom_col()\n\nwe no longer the labels created via geom_text()\n\n\nGiven this, we have a well-prepared ggplot in need of geoms:\n\np2_base &lt;- ggplot(data = dat) +\n  aes(x = lifeExp, y = country, color = fct_rev(year)) +\n  scale_color_manual(\n    name = \"Year\",\n    limits = c(\"1952\", \"2007\"), \n    values = year_colors, \n    guide = \"none\"\n  ) +\n  scale_y_discrete(\n    name = NULL,\n  ) + \n  scale_x_continuous(\n    name = NULL,\n  ) +\n  labs(\n    title = \"LIFE EXPECTANCY\",\n    subtitle = new_long_subtitle\n  ) +\n  theme_nature()\n\np2_base\n\n\n\n\nWe only need two geoms to create a dumbbell plot here: geom_segment() draws a straight line between points (x, y) and (xend, yend), which works nicely with the dat_lifeExp_wide created above. Note that the color = \"#AAAAAA\" overrides the color = fct_rev(year) from the general aes() that would otherwise apply. The points are automatically created and colored via geom_point() based on dat and the general aes().\n\np2 &lt;- p2_base +\n  geom_segment(\n    data = dat_lifeExp_wide,\n    aes(x = year_1952, xend = year_2007, y = country, yend = country),\n    color = \"#AAAAAA\",\n    linewidth = 1\n  ) +\n  geom_point(size = 3)\n\np2\n\n\n\n\nlabels again\nOnce again we can decide additionally have data points labeled with their values. We can easily add the rounded life expectancy above each point by basically using the same general aesthetics as geom_point() but vertically justifying a bit upwards.\nYet, even more informative is the actual difference between 2007 and 1952. For that, we can use dat_lifeExp_wide again where we already have one column per year and can subtract them into a new column diff. For easier readability we then format that result by first rounding it and then making it into a string diff_lab that always displays “+” or “-” in front of the respective number. I want to position this label on the right side of each dumbbell and could easily do so if the life expectancy were always higher for 2007 but this is not the case for Zimbabwe. Thus, I am also creating a helper column max_x which is simply the maximum life expectancy of the two years or in other words the right side of the dumbbell. We now have everything we need to use a second geom_text where we use dat = dat_lifeExp_wide instead of the dataset provided in ggplot(data = dat) and set the aesthetics as aes(x = max_x, label = diff_lab). So far, our labels would be on top of the point of the right side of the dumbbell. Thus, we add position = position_nudge(x = 1) to nudge the position for the label one year to the right and additionally use hjust = 0 so that the label is not centered but instead left-aligned to that nudged position.\n\ndat_lifeExp_wide &lt;- dat_lifeExp_wide %&gt;% \n  mutate(\n    max_x = pmax(year_2007, year_1952),\n    diff = year_2007 - year_1952,\n    diff_lab = sprintf(\"%+d\", round(diff))\n  )\n\np2 &lt;- p2 +\n  geom_text(\n    mapping = aes(label = round(lifeExp)),\n    size = 2.5,\n    vjust = -1,\n    family = \"kanit\"\n  ) +\n  geom_text(\n    data = dat_lifeExp_wide,\n    mapping = aes(x = max_x, label = diff_lab),\n    size = 2.5,\n    hjust = 0,\n    position = position_nudge(x = 1),\n    color = \"#AAAAAA\",\n    family = \"kanit\"\n  )\n\np2"
  },
  {
    "objectID": "index.html#data-prep-1",
    "href": "index.html#data-prep-1",
    "title": "Tutorial: Advanced data visualization in R",
    "section": "data prep",
    "text": "data prep\nTo do that, we need to restructure our data so that all values are in the same column:\n\ndat_long &lt;- dat %&gt;%\n  pivot_longer(\n    cols = c(lifeExp, pop, gdpPercap),\n    names_to = \"statistic\",\n    values_to = \"value\"\n  )\n\ndat_long\n#&gt; # A tibble: 42 × 5\n#&gt;    country continent year  statistic      value\n#&gt;    &lt;fct&gt;   &lt;fct&gt;     &lt;fct&gt; &lt;chr&gt;          &lt;dbl&gt;\n#&gt;  1 Canada  Americas  1952  lifeExp         68.8\n#&gt;  2 Canada  Americas  1952  pop       14785584  \n#&gt;  3 Canada  Americas  1952  gdpPercap    11367. \n#&gt;  4 Canada  Americas  2007  lifeExp         80.7\n#&gt;  5 Canada  Americas  2007  pop       33390141  \n#&gt;  6 Canada  Americas  2007  gdpPercap    36319. \n#&gt;  7 Germany Europe    1952  lifeExp         67.5\n#&gt;  8 Germany Europe    1952  pop       69145952  \n#&gt;  9 Germany Europe    1952  gdpPercap     7144. \n#&gt; 10 Germany Europe    2007  lifeExp         79.4\n#&gt; # ℹ 32 more rows\n\nMoreover, we need a dat_all_wide instead of the dat_lifeExp_wide from above:\n\ndat_all_wide &lt;- dat_long %&gt;% \n  pivot_wider(names_from = year, values_from = value, names_prefix = 'year_') %&gt;% \n    mutate(\n    max_x = pmax(year_2007, year_1952),\n    diff = year_2007 - year_1952,\n    diff_lab = sprintf(\"%+d\", round(diff))\n  )\n\nFinally, besides changing title and subtitle, the most important change is to add facet_wrap(facets = ~ statistic, scales = \"free_x\") so that we get one plot per value in the statistic column while their x-axes are allowed to have different scales:"
  },
  {
    "objectID": "index.html#facets",
    "href": "index.html#facets",
    "title": "Tutorial: Advanced data visualization in R",
    "section": "facets",
    "text": "facets\n\nanother_long_subtitle &lt;- paste0(\"In &lt;b style='color:\", year_colors[[\"2007\"]], \";'&gt;2007&lt;/b&gt;, compared to &lt;b style='color:\", year_colors[[\"1952\"]],\";'&gt;1952&lt;/b&gt;, life expectancy, Gross Domestic Product (GDP) per capita, and population data collectively reflect significant advancements in health, economic prosperity, and demographic trends, illustrating an overall enhanced quality of life.\")\n\nggplot(data = dat_long) +\n  aes(x = value, y = country, color = fct_rev(year)) +\n  facet_wrap(facets = ~ statistic, scales = \"free_x\") +\n  scale_color_manual(\n    name = \"Year\",\n    limits = c(\"1952\", \"2007\"), \n    values = year_colors,\n    guide = \"none\"\n  ) +\n  labs(\n    title = \"GDP, LIFE EXPECTANCY & POPULATION\",\n    subtitle = another_long_subtitle\n  ) +\n  scale_y_discrete(\n    name = NULL,\n  ) + \n  scale_x_continuous(\n    name = NULL,\n  ) +\n  theme_nature() +\n  geom_segment(\n    data = dat_all_wide,\n    aes(x = year_1952, xend = year_2007, y = country, yend = country),\n    color = \"#AAAAAA\",\n    linewidth = 1\n  ) +\n  geom_point(size = 3) +\n  geom_text(\n    mapping = aes(label = round(value)),\n    size = 2.5,\n    vjust = -1,\n    family = \"kanit\"\n  ) +\n  geom_text(\n    data = dat_all_wide,\n    mapping = aes(x = max_x, label = diff_lab),\n    size = 2.5,\n    hjust = 0,\n    position = position_nudge(x = 1),\n    color = \"#AAAAAA\",\n    family = \"kanit\"\n  )"
  },
  {
    "objectID": "index.html#individual-labels",
    "href": "index.html#individual-labels",
    "title": "Tutorial: Advanced data visualization in R",
    "section": "individual labels",
    "text": "individual labels\nSo technically this worked, but it obviously needs some tweaking. First, the facets should have nicer labels than just the variable names. Moreover, while it is helpful that the x-axes of the different facets were allowed to have different scales/limits, the vast difference between magnitude of the three variables leads to problematic labels for both the axes and inside the plot. As a result, simply rounding the numbers is still appropriate for life expectancy, but not for the other two. We therefore create a new column value_lab in which labels for each point are defined depending on what statistic it is. A convenient way to create such formatted numbers is the scales::number() function. Besides value_lab in dat_long, we also recreate diff_lab in dat_all_wide this way, additionally adding the +/-. Finally note that also the method of positioning the label on the right side of the dumbbell no longer works. One way of fixing it is also creating a new column x_pos_lab which adds a certain value to max_x depending on the statistic.\n\ndat_long &lt;- dat_long %&gt;% \n  mutate(value_lab = case_when(\n    statistic == \"lifeExp\"   ~ number(value, accuracy = 1),\n    statistic == \"pop\"       ~ number(value, accuracy = 1,   scale = 1/1000000, suffix = \"m\"),\n    statistic == \"gdpPercap\" ~ number(value, accuracy = 0.1, scale = 1/1000,    suffix = \"k\")\n  ))\n\ndat_all_wide &lt;- dat_all_wide %&gt;%\n  mutate(\n    diff_lab = case_when(\n      statistic == \"lifeExp\"   ~ number(\n        diff,\n        style_positive = \"plus\",\n        style_negative = \"minus\",\n        accuracy = 1\n      ),\n      statistic == \"pop\"       ~ number(\n        diff,\n        style_positive = \"plus\",\n        style_negative = \"minus\",\n        accuracy = 1,\n        scale = 1 / 1000000,\n        suffix = \"m\"\n      ),\n      statistic == \"gdpPercap\" ~ number(\n        diff,\n        style_positive = \"plus\",\n        style_negative = \"minus\",\n        accuracy = 0.1,\n        scale = 1 / 1000,\n        suffix = \"k\"\n      )\n    ),\n    x_pos_lab = case_when(\n      statistic == \"lifeExp\"   ~ max_x + 3,\n      statistic == \"pop\"       ~ max_x + 10000000,\n      statistic == \"gdpPercap\" ~ max_x + 3000\n    )\n  )\n\nWe can then apply these new labels to our faceted ggplot. We also provide labels per facet via labeller = labeller(statistic = ...). Finally note that even though we shortened the labels, they will still overlap in some cases where the points are too close to each other. One solution is to have the 1952-label below and the 2007-label above the point which can be achived by moving the vjust inside the aes() and having it depend on the year via vjust = if_else(year == \"1952\", 2, -1):\n\nfacet_labels &lt;- c(lifeExp = \"Life Expectancy [years]\", pop = \"Population\", gdpPercap = \"GDP per Capita [$]\")\n\np3 &lt;- ggplot(data = dat_long) +\n  aes(x = value, y = country, color = fct_rev(year)) +\n  facet_wrap(\n    facets = ~ statistic,\n    scales = \"free_x\",\n    labeller = labeller(statistic = facet_labels)\n  ) +\n  scale_color_manual(\n    name = \"Year\",\n    limits = c(\"1952\", \"2007\"), \n    values = year_colors,\n    guide = \"none\"\n  ) +\n  scale_y_discrete(\n    name = NULL,\n  ) + \n  scale_x_continuous(\n    name = NULL,\n  ) +\n  labs(\n    title = \"GDP, LIFE EXPECTANCY & POPULATION\",\n    subtitle = another_long_subtitle\n  ) +\n  theme_nature() +\n  theme(\n    panel.spacing = unit(1, \"lines\"),\n    strip.background = element_rect(fill = NA, color = \"black\")\n  ) +\n  geom_segment(\n    data = dat_all_wide,\n    aes(x = year_1952, xend = year_2007, y = country, yend = country),\n    color = \"#AAAAAA\",\n    linewidth = 1\n  ) +\n  geom_point(size = 3) +\n  geom_text(\n    mapping = aes(label = value_lab, vjust = if_else(year == \"1952\", 2, -1)),\n    size = 2.5,\n    family = \"kanit\"\n  ) +\n  geom_text(\n    data = dat_all_wide,\n    mapping = aes(x = x_pos_lab, label = diff_lab),\n    size = 2.5,\n    hjust = 0,\n    color = \"#AAAAAA\",\n    family = \"kanit\"\n  )\n\np3"
  },
  {
    "objectID": "index.html#individual-scales",
    "href": "index.html#individual-scales",
    "title": "Tutorial: Advanced data visualization in R",
    "section": "individual scales",
    "text": "individual scales\nHowever, the axes are still not optimal for two reasons: The axis labels do not look good except for Life Expectancy and the labels inside the plots are sometimes cut off due to the axis limits. Adjusting axes per facet is actually not possible/straightforward via {ggplot2} so we need load {ggh4x} to make use of facetted_pos_scales. Note that we can use labels = scales::number_format() in basically the same way as we used scales::number() above. Moreover, we choose good combinations of limits and expand to make sure no labels are cut off and finally pick breaks via the convenient scales::breaks_width() function:\n\np3 &lt;- p3 + facetted_pos_scales(\n  x = list(\n    statistic == \"lifeExp\" ~ scale_x_continuous(\n      limits = c(35, 90),\n      breaks = breaks_width(20),\n      labels = number_format(accuracy = 1)\n    ),\n    statistic == \"pop\" ~ scale_x_continuous(\n      limits = c(0, 150000000),\n      expand = expansion(mult = c(0.05, 0.2)),\n      breaks = breaks_width(50000000),\n      labels = number_format(\n        accuracy = 1,\n        scale = 1 / 1000000,\n        suffix = \"m\"\n      )\n    ),\n    statistic == \"gdpPercap\" ~ scale_x_continuous(\n      limits = c(0, 50000),\n      expand = expansion(mult = c(0.075, 0.075)),\n      breaks = breaks_width(25000),\n      labels = number_format(\n        accuracy = 1,\n        scale = 1 / 1000,\n        suffix = \"k\"\n      )\n    )\n  )\n) + xlab(NULL) # apparently necessary?!\n\np3"
  },
  {
    "objectID": "login.html",
    "href": "login.html",
    "title": "Login Page",
    "section": "",
    "text": "Log In\nPlease log in to access the website.\n\nLog In\n\n\n\n\n\n\n\nCheck Current User\n\n\nCheck Current User"
  }
]